/*
* generated by Xtext
*/
package at.ac.tuwien.big.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QuestionnaireGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Questionnaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGroupsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGroupsGroupParserRuleCall_3_0 = (RuleCall)cGroupsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Questionnaire:
		//	"questionnaire" title=STRING "[" groups+=Group+ "]";
		public ParserRule getRule() { return rule; }

		//"questionnaire" title=STRING "[" groups+=Group+ "]"
		public Group getGroup() { return cGroup; }

		//"questionnaire"
		public Keyword getQuestionnaireKeyword_0() { return cQuestionnaireKeyword_0; }

		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//groups+=Group+
		public Assignment getGroupsAssignment_3() { return cGroupsAssignment_3; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_0() { return cGroupsGroupParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cQuestionsAlternatives_3_0 = (Alternatives)cQuestionsAssignment_3.eContents().get(0);
		private final RuleCall cQuestionsOpenQuestionParserRuleCall_3_0_0 = (RuleCall)cQuestionsAlternatives_3_0.eContents().get(0);
		private final RuleCall cQuestionsClosedQuestionParserRuleCall_3_0_1 = (RuleCall)cQuestionsAlternatives_3_0.eContents().get(1);
		private final RuleCall cQuestionsLikertQuestionParserRuleCall_3_0_2 = (RuleCall)cQuestionsAlternatives_3_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Group:
		//	"group" name=STRING "[" questions+=(OpenQuestion | ClosedQuestion | LikertQuestion)+ "]" ","?;
		public ParserRule getRule() { return rule; }

		//"group" name=STRING "[" questions+=(OpenQuestion | ClosedQuestion | LikertQuestion)+ "]" ","?
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//questions+=(OpenQuestion | ClosedQuestion | LikertQuestion)+
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//OpenQuestion | ClosedQuestion | LikertQuestion
		public Alternatives getQuestionsAlternatives_3_0() { return cQuestionsAlternatives_3_0; }

		//OpenQuestion
		public RuleCall getQuestionsOpenQuestionParserRuleCall_3_0_0() { return cQuestionsOpenQuestionParserRuleCall_3_0_0; }

		//ClosedQuestion
		public RuleCall getQuestionsClosedQuestionParserRuleCall_3_0_1() { return cQuestionsClosedQuestionParserRuleCall_3_0_1; }

		//LikertQuestion
		public RuleCall getQuestionsLikertQuestionParserRuleCall_3_0_2() { return cQuestionsLikertQuestionParserRuleCall_3_0_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//","?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
	}

	public class OpenQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMultilineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOpenQuestionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_3_0 = (RuleCall)cQuestionAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenQuestion:
		//	"mandatory"? "multiline"? "open question" question=STRING ","?;
		public ParserRule getRule() { return rule; }

		//"mandatory"? "multiline"? "open question" question=STRING ","?
		public Group getGroup() { return cGroup; }

		//"mandatory"?
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }

		//"multiline"?
		public Keyword getMultilineKeyword_1() { return cMultilineKeyword_1; }

		//"open question"
		public Keyword getOpenQuestionKeyword_2() { return cOpenQuestionKeyword_2; }

		//question=STRING
		public Assignment getQuestionAssignment_3() { return cQuestionAssignment_3; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_3_0() { return cQuestionSTRINGTerminalRuleCall_3_0; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}

	public class ClosedQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClosedQuestionAllowingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSingleAnswerKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMultipleAnswersKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cQuestionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_2_0 = (RuleCall)cQuestionAssignment_2.eContents().get(0);
		private final Assignment cAnswersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnswersAnswersParserRuleCall_3_0 = (RuleCall)cAnswersAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClosedQuestion:
		//	"closed question allowing" ("single answer" | "multiple answers") question=STRING answers=Answers ","?;
		public ParserRule getRule() { return rule; }

		//"closed question allowing" ("single answer" | "multiple answers") question=STRING answers=Answers ","?
		public Group getGroup() { return cGroup; }

		//"closed question allowing"
		public Keyword getClosedQuestionAllowingKeyword_0() { return cClosedQuestionAllowingKeyword_0; }

		//"single answer" | "multiple answers"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"single answer"
		public Keyword getSingleAnswerKeyword_1_0() { return cSingleAnswerKeyword_1_0; }

		//"multiple answers"
		public Keyword getMultipleAnswersKeyword_1_1() { return cMultipleAnswersKeyword_1_1; }

		//question=STRING
		public Assignment getQuestionAssignment_2() { return cQuestionAssignment_2; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_2_0() { return cQuestionSTRINGTerminalRuleCall_2_0; }

		//answers=Answers
		public Assignment getAnswersAssignment_3() { return cAnswersAssignment_3; }

		//Answers
		public RuleCall getAnswersAnswersParserRuleCall_3_0() { return cAnswersAnswersParserRuleCall_3_0; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}

	public class LikertQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LikertQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLikertQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLowerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLowerINTTerminalRuleCall_4_0 = (RuleCall)cLowerAssignment_4.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHigherAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHigherINTTerminalRuleCall_6_0 = (RuleCall)cHigherAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LikertQuestion:
		//	"likert question" question=STRING "(" "-"? lower=INT ".." higher=INT ")" ","?;
		public ParserRule getRule() { return rule; }

		//"likert question" question=STRING "(" "-"? lower=INT ".." higher=INT ")" ","?
		public Group getGroup() { return cGroup; }

		//"likert question"
		public Keyword getLikertQuestionKeyword_0() { return cLikertQuestionKeyword_0; }

		//question=STRING
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_1_0() { return cQuestionSTRINGTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//"-"?
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }

		//lower=INT
		public Assignment getLowerAssignment_4() { return cLowerAssignment_4; }

		//INT
		public RuleCall getLowerINTTerminalRuleCall_4_0() { return cLowerINTTerminalRuleCall_4_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_5() { return cFullStopFullStopKeyword_5; }

		//higher=INT
		public Assignment getHigherAssignment_6() { return cHigherAssignment_6; }

		//INT
		public RuleCall getHigherINTTerminalRuleCall_6_0() { return cHigherINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//","?
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
	}

	public class AnswersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnswersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAnswersAlternatives_1_0 = (Alternatives)cAnswersAssignment_1.eContents().get(0);
		private final RuleCall cAnswersOpenAnswerParserRuleCall_1_0_0 = (RuleCall)cAnswersAlternatives_1_0.eContents().get(0);
		private final RuleCall cAnswersClosedAnswerParserRuleCall_1_0_1 = (RuleCall)cAnswersAlternatives_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefaultAnswerIsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////1st version works without Errors (except of "Other...")
		// //Answers:
		// //        'answers ['
		//
		////        ((STRING) ('enables question ['(STRING(',')?)+']')?(',')?)+
		// //        ']'
		//
		////        ('default answer is' STRING)?
		// //;
		// //2nd version (with warnings)
		//
		////	('default answer is' answer=[ClosedAnswer])?
		// Answers:
		//	"answers [" answers+=(OpenAnswer | ClosedAnswer)+ ","? "]" ("default answer is" STRING)? ","?;
		public ParserRule getRule() { return rule; }

		//"answers [" answers+=(OpenAnswer | ClosedAnswer)+ ","? "]" ("default answer is" STRING)? ","?
		public Group getGroup() { return cGroup; }

		//"answers ["
		public Keyword getAnswersKeyword_0() { return cAnswersKeyword_0; }

		//answers+=(OpenAnswer | ClosedAnswer)+
		public Assignment getAnswersAssignment_1() { return cAnswersAssignment_1; }

		//OpenAnswer | ClosedAnswer
		public Alternatives getAnswersAlternatives_1_0() { return cAnswersAlternatives_1_0; }

		//OpenAnswer
		public RuleCall getAnswersOpenAnswerParserRuleCall_1_0_0() { return cAnswersOpenAnswerParserRuleCall_1_0_0; }

		//ClosedAnswer
		public RuleCall getAnswersClosedAnswerParserRuleCall_1_0_1() { return cAnswersClosedAnswerParserRuleCall_1_0_1; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//("default answer is" STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"default answer is"
		public Keyword getDefaultAnswerIsKeyword_4_0() { return cDefaultAnswerIsKeyword_4_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4_1() { return cSTRINGTerminalRuleCall_4_1; }

		//","?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
	}

	public class OpenAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OpenAnswer:
		//	STRING "...";
		public ParserRule getRule() { return rule; }

		//STRING "..."
		public Group getGroup() { return cGroup; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
	}

	public class ClosedAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEnablesQuestionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClosedAnswer:
		//	(STRING ("enables question [" (STRING ","?)+ "]")? ","?)+;
		public ParserRule getRule() { return rule; }

		//(STRING ("enables question [" (STRING ","?)+ "]")? ","?)+
		public Group getGroup() { return cGroup; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//("enables question [" (STRING ","?)+ "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"enables question ["
		public Keyword getEnablesQuestionKeyword_1_0() { return cEnablesQuestionKeyword_1_0; }

		//(STRING ","?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_0() { return cSTRINGTerminalRuleCall_1_1_0; }

		//","?
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	
	
	private QuestionnaireElements pQuestionnaire;
	private GroupElements pGroup;
	private OpenQuestionElements pOpenQuestion;
	private ClosedQuestionElements pClosedQuestion;
	private LikertQuestionElements pLikertQuestion;
	private AnswersElements pAnswers;
	private OpenAnswerElements pOpenAnswer;
	private ClosedAnswerElements pClosedAnswer;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuestionnaireGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.Questionnaire".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Questionnaire:
	//	"questionnaire" title=STRING "[" groups+=Group+ "]";
	public QuestionnaireElements getQuestionnaireAccess() {
		return (pQuestionnaire != null) ? pQuestionnaire : (pQuestionnaire = new QuestionnaireElements());
	}
	
	public ParserRule getQuestionnaireRule() {
		return getQuestionnaireAccess().getRule();
	}

	//Group:
	//	"group" name=STRING "[" questions+=(OpenQuestion | ClosedQuestion | LikertQuestion)+ "]" ","?;
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//OpenQuestion:
	//	"mandatory"? "multiline"? "open question" question=STRING ","?;
	public OpenQuestionElements getOpenQuestionAccess() {
		return (pOpenQuestion != null) ? pOpenQuestion : (pOpenQuestion = new OpenQuestionElements());
	}
	
	public ParserRule getOpenQuestionRule() {
		return getOpenQuestionAccess().getRule();
	}

	//ClosedQuestion:
	//	"closed question allowing" ("single answer" | "multiple answers") question=STRING answers=Answers ","?;
	public ClosedQuestionElements getClosedQuestionAccess() {
		return (pClosedQuestion != null) ? pClosedQuestion : (pClosedQuestion = new ClosedQuestionElements());
	}
	
	public ParserRule getClosedQuestionRule() {
		return getClosedQuestionAccess().getRule();
	}

	//LikertQuestion:
	//	"likert question" question=STRING "(" "-"? lower=INT ".." higher=INT ")" ","?;
	public LikertQuestionElements getLikertQuestionAccess() {
		return (pLikertQuestion != null) ? pLikertQuestion : (pLikertQuestion = new LikertQuestionElements());
	}
	
	public ParserRule getLikertQuestionRule() {
		return getLikertQuestionAccess().getRule();
	}

	////1st version works without Errors (except of "Other...")
	// //Answers:
	// //        'answers ['
	//
	////        ((STRING) ('enables question ['(STRING(',')?)+']')?(',')?)+
	// //        ']'
	//
	////        ('default answer is' STRING)?
	// //;
	// //2nd version (with warnings)
	//
	////	('default answer is' answer=[ClosedAnswer])?
	// Answers:
	//	"answers [" answers+=(OpenAnswer | ClosedAnswer)+ ","? "]" ("default answer is" STRING)? ","?;
	public AnswersElements getAnswersAccess() {
		return (pAnswers != null) ? pAnswers : (pAnswers = new AnswersElements());
	}
	
	public ParserRule getAnswersRule() {
		return getAnswersAccess().getRule();
	}

	//OpenAnswer:
	//	STRING "...";
	public OpenAnswerElements getOpenAnswerAccess() {
		return (pOpenAnswer != null) ? pOpenAnswer : (pOpenAnswer = new OpenAnswerElements());
	}
	
	public ParserRule getOpenAnswerRule() {
		return getOpenAnswerAccess().getRule();
	}

	//ClosedAnswer:
	//	(STRING ("enables question [" (STRING ","?)+ "]")? ","?)+;
	public ClosedAnswerElements getClosedAnswerAccess() {
		return (pClosedAnswer != null) ? pClosedAnswer : (pClosedAnswer = new ClosedAnswerElements());
	}
	
	public ParserRule getClosedAnswerRule() {
		return getClosedAnswerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
