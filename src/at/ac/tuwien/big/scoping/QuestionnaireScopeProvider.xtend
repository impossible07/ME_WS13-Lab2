/*
 * generated by Xtext
 */
package at.ac.tuwien.big.scoping

import at.ac.tuwien.big.questionnaire.ClosedAnswer
import at.ac.tuwien.big.questionnaire.DefAnswer
import at.ac.tuwien.big.questionnaire.impl.AnswersImpl
import at.ac.tuwien.big.questionnaire.impl.GroupImpl
import at.ac.tuwien.big.questionnaire.impl.QuestionnaireImpl
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class QuestionnaireScopeProvider extends AbstractDeclarativeScopeProvider {
	
	override getScope(EObject context, EReference reference) {
		val List<EObject> scopeList = newArrayList;
		  //////////////////////////////////////
		 // Scope for "default answer is..." //
		//////////////////////////////////////
		if (context instanceof DefAnswer) {
			for (EObject e : (context.eContainer() as AnswersImpl).getAnswers()) {
				scopeList.add(e);
			}
			if (scopeList.empty) 
				return IScope.NULLSCOPE
			else 
				return Scopes.scopeFor(scopeList);
		  ///////////////////////////////////////
		 // Scope for "enables question [..." //
		///////////////////////////////////////
		} else if (context instanceof ClosedAnswer) {
			for (EObject e : (context.eContainer().eContainer().eContainer().eContainer() as QuestionnaireImpl).groups) {
				for (EObject q : (e as GroupImpl).questions) {
					scopeList.add(q);
				}
			}
			if (scopeList.empty) 
				return IScope.NULLSCOPE
			else 
				return Scopes.scopeFor(scopeList);
		}
    	return super.getScope(context, reference);
	}
}
