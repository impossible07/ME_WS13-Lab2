/**
 * generated by Xtext
 */
package at.ac.tuwien.big.scoping;

import at.ac.tuwien.big.questionnaire.Answer;
import at.ac.tuwien.big.questionnaire.DefAnswer;
import at.ac.tuwien.big.questionnaire.impl.AnswersImpl;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class QuestionnaireScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope getScope(final EObject context, final EReference reference) {
    final List<EObject> scopeList = CollectionLiterals.<EObject>newArrayList();
    if ((context instanceof DefAnswer)) {
      EObject _eContainer = context.eContainer();
      EList<Answer> _answers = ((AnswersImpl) _eContainer).getAnswers();
      for (final EObject e : _answers) {
        scopeList.add(e);
      }
      return Scopes.scopeFor(scopeList);
    }
    return super.getScope(context, reference);
  }
}
